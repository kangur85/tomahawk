/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package eu.kaszkowiak.tomahawk.parser;

import java.io.Reader;
import java.io.StringReader;
import eu.kaszkowiak.tomahawk.model.*;
import eu.kaszkowiak.tomahawk.model.formatting.*;
import eu.kaszkowiak.tomahawk.model.directives.*;

public class Parser implements ParserConstants {

    public Parser(String source) {
        this((Reader)(new StringReader(source)));
    }

  final public Configuration parse() throws ParseException {Configuration config = new Configuration();
    ConfigurationEntry ce;
    Comment comment;
    label_1:
    while (true) {
      ce = configurationEntry();
config.addEntry(ce);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_SQ:
      case COMMENT:
      case ENDLINE:
      case INCLUDE:
      case USE:
      case PARAM:
      case LEFT_CROC:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
{if ("" != null) return config;}
    throw new Error("Missing return statement in function");
  }

  final public ConfigurationEntry configurationEntry() throws ParseException {ConfigurationEntry ce;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_SQ:
    case INCLUDE:
    case USE:
    case PARAM:
    case LEFT_CROC:{
      ce = directive();
      break;
      }
    case COMMENT:
    case ENDLINE:{
      ce = formatingEntry();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ce;}
    throw new Error("Missing return statement in function");
  }

  final public FormattingEntry formatingEntry() throws ParseException {FormattingEntry fe;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMENT:{
      fe = comment();
      break;
      }
    case ENDLINE:{
      fe = blankLine();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return fe;}
    throw new Error("Missing return statement in function");
  }

  final public Directive directive() throws ParseException {Directive dir;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_CROC:{
      dir = tagDirective();
      break;
      }
    case USE:{
      dir = useDirective();
      break;
      }
    case INCLUDE:{
      dir = includeDirective();
      break;
      }
    case STRING_SQ:
    case PARAM:{
      dir = simpleDirective();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    endline();
{if ("" != null) return dir;}
    throw new Error("Missing return statement in function");
  }

  final public IncludeDirective includeDirective() throws ParseException {IncludeDirective id;
    String includeText;
    jj_consume_token(INCLUDE);
    includeText = param();
id = new IncludeDirective(includeText);
{if ("" != null) return id;}
    throw new Error("Missing return statement in function");
  }

  final public UseDirective useDirective() throws ParseException {UseDirective res = new UseDirective();
    String param;
    String macroName;
    jj_consume_token(USE);
    macroName = param();
res.setMacroName(macroName);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_SQ:
      case PARAM:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      param = param();
res.addParam(param);
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
  }

  final public BlankLine blankLine() throws ParseException {
    jj_consume_token(ENDLINE);
{if ("" != null) return new BlankLine();}
    throw new Error("Missing return statement in function");
  }

  final public Comment comment() throws ParseException {Token tStr = null;
    String res;
    tStr = jj_consume_token(COMMENT);
res = tStr.image;
        if (res.length() > 1) {
            res = res.substring(0, res.length()-1);
            {if ("" != null) return new Comment(res);}
        }
        else {
            {if ("" != null) return null;}
        }
    throw new Error("Missing return statement in function");
  }

  final public SimpleDirective simpleDirective() throws ParseException {SimpleDirective res = new SimpleDirective();
    String param;
    String name;
    Comment comment;
    name = param();
res.setName(name);
    label_3:
    while (true) {
      param = param();
res.addParam(param);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_SQ:
      case PARAM:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMENT:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      comment = comment();
res.setInlineComment(new InlineComment(comment.getText()));
    }
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
  }

  final public TagDirective tagDirective() throws ParseException {TagDirective res = new TagDirective();
    String tagName;
    String param;
    ConfigurationEntry ce;
    String endingTagName;
    jj_consume_token(LEFT_CROC);
    tagName = param();
res.setName(tagName);
    label_5:
    while (true) {
      param = param();
res.addParam(param);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_SQ:
      case PARAM:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(RIGHT_CROC);
    jj_consume_token(ENDLINE);
    label_6:
    while (true) {
      ce = configurationEntry();
res.addChildEntry(ce);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_SQ:
      case COMMENT:
      case ENDLINE:
      case INCLUDE:
      case USE:
      case PARAM:
      case LEFT_CROC:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(LEFT_ENDING_CROC);
    endingTagName = param();
res.setEndName(endingTagName);
    jj_consume_token(RIGHT_CROC);
{if ("" != null) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String param() throws ParseException {Token tStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARAM:{
      tStr = jj_consume_token(PARAM);
      break;
      }
    case STRING_SQ:{
      tStr = jj_consume_token(STRING_SQ);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tStr.image;}
    throw new Error("Missing return statement in function");
  }

  final public String endline() throws ParseException {Token tStr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENDLINE:{
      tStr = jj_consume_token(ENDLINE);
{if ("" != null) return tStr.image;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return "";}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1f90,0x1f90,0x180,0x1e10,0x810,0x810,0x80,0x810,0x1f90,0x810,0x101,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
